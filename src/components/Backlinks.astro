---
import type { SerializedGraph } from "graphology-types";

interface Props {
  postSlug: string;
}

const { postSlug } = Astro.props;

const graphJson = await import("../pages/graph.json");
const { nodes, edges }: SerializedGraph = await graphJson
  .GET({})
  .then((response) => response.json());

const backlinks = edges.filter((edge) => edge.target === postSlug);
---

{
  backlinks.length > 0 && (
    <>
      <h5>Backlinks</h5>
      <ol class="backlinks">
        {backlinks.map((backlink) => {
          const referenceNode = nodes.find(
            (node) => backlink.source === node.key
          );
          return (
            <li class="backlink">
              <a href={`/notes/${backlink.source}/`}>
                {referenceNode?.attributes ? (
                  <p title={referenceNode.attributes.description}>
                    {referenceNode.attributes.label}
                  </p>
                ) : (
                  backlink.target
                )}
              </a>
            </li>
          );
        })}
      </ol>
    </>
  )
}

<style>
  .backlink {
    counter-increment: li;
    display: list-item;
  }

  .backlink::marker {
    display: list-item;
    content: "[" counter(li) "] ";
  }

  .backlink a {
    text-decoration: none;
    color: var(--nord0);
  }

  .backlink a p {
    margin: 0;
  }

  .backlink a:hover p {
    color: var(--nord10);
  }
</style>
